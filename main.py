from telethon import TelegramClient, events
from telethon.tl.functions.messages import SendReactionRequest
import os
import asyncio

# Environment variables ржерзЗржХрзЗ API ржбрзЗржЯрж╛ ржирзЗржУрзЯрж╛
api_id = int(os.environ.get("API_ID"))
api_hash = os.environ.get("API_HASH")
phone = os.environ.get("PHONE")                   # ржлрзЛржи ржирж╛ржорзНржмрж╛рж░ environment ржерзЗржХрзЗ ржирж┐ржмрзЗ
user_id = int(os.environ.get("USER_ID"))          # ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ numeric Telegram user ID
group_id = os.environ.get("GROUP_ID")             # ржЧрзНрж░рзБржк username ржмрж╛ ID (ex: -1001234567890)

# Telethon ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ рждрзИрж░рж┐
client = TelegramClient("session", api_id, api_hash)

# рж░рж┐рзЯрзЗржХрзНржЯ ржЗржорзЛржЬрж┐рж░ рж▓рж┐рж╕рзНржЯ
reactions = [
    'тЭдя╕П', 'ЁЯФе', 'ЁЯСН', 'ЁЯШН', 'ЁЯШ▒', 'ЁЯСП', 'ЁЯТп',
    'тЭдя╕ПтАНЁЯФе', 'ЁЯОЙ', 'ЁЯдй', 'ЁЯСМЁЯП╗', 'ЁЯЧ┐', 'тЪб'
]

@client.on(events.NewMessage(chats=group_id))
async def react(event):
    if event.sender_id == user_id:
        for reaction in reactions:
            try:
                await client(SendReactionRequest(
                    peer=event.chat_id,
                    msg_id=event.id,
                    reaction=reaction
                ))
                await asyncio.sleep(0.3)  # рж╕рзНржкрзНржпрж╛ржо ржПржбрж╝рж╛рждрзЗ рж╕рж╛ржорж╛ржирзНржп рж╕ржорзЯ ржжрж┐ржмрзЗ
            except Exception as e:
                print(f"Failed to send reaction {reaction}: {e}")

@client.on(events.NewMessage(pattern="/ping"))
async def ping(event):
    await event.reply("I'm alive!")

async def keep_alive():
    while True:
        try:
            # ржкрзНрж░рждрж┐ рзл ржорж┐ржирж┐ржЯрзЗ ржмржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░рж╛рж░ ржЬржирзНржп ping event ржЗржорж┐ржЯ ржХрж░рж╛ ржмрж╛ ржХржирж╕рзЛрж▓ рж▓ржЧ
            print("Keep alive ping...")
            await asyncio.sleep(300)  # рзл ржорж┐ржирж┐ржЯ = 300 рж╕рзЗржХрзЗржирзНржб
        except Exception as e:
            print(f"Keep alive error: {e}")
            await asyncio.sleep(10)

async def main():
    await client.start(phone=phone)
    # keep_alive ржЯрж╛рж╕рзНржХ рж╢рзБрж░рзБ
    asyncio.create_task(keep_alive())
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
